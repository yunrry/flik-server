name: Build and Deploy Flik Server to Raspberry Pi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RASPBERRY_PI_HOST: ${{ secrets.RASPBERRY_PI_HOST }}
  RASPBERRY_PI_USER: ${{ secrets.RASPBERRY_PI_USER }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
  NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
  KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ADMIN_MASTER_KEY: ${{ secrets.ADMIN_MASTER_KEY }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📦 Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧪 Test Flik Server
        run: |
          chmod +x gradlew
          ./gradlew clean test -Dspring.profiles.active=test --parallel --max-workers=4

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Build Time Start
        id: build_start
        run: echo "build_start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: 🐳 Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          config-inline: |
            [worker.oci]
              max-parallelism = 4
            [worker.containerd]
              max-parallelism = 4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup image name
        run: echo "IMAGE_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-arm64

      - name: 🏗️ Build and push Flik Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=buildkit
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_LOWER }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=buildkit
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_LOWER }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          builder: ${{ steps.buildx.outputs.name }}

      - name: 📊 Build Time End
        run: |
          build_end=$(date +%s)
          build_duration=$((build_end - ${{ steps.build_start.outputs.build_start }}))
          echo "🕒 Build completed in ${build_duration} seconds ($((build_duration/60)) minutes)"

      - name: 🚀 Deploy Flik Server to Raspberry Pi
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.RASPBERRY_PI_HOST }}
          username: ${{ env.RASPBERRY_PI_USER }}
          key: ${{ secrets.RASPBERRY_PI_SSH_KEY }}
          port: 2022
          timeout: 300s
          command_timeout: 30m
          script: |
            # 배포 시작 시간 기록
            DEPLOY_START=$(date +%s)
            echo "🚀 Starting deployment at $(date)"
            
            # Clone or pull flik-server repository
            if [ ! -d "/home/yoon/flik-server" ]; then
              cd /home/yoon
              echo "📥 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git flik-server
            else
              cd /home/yoon/flik-server
              echo "🔄 Pulling latest changes..."
              git pull origin main
            fi
            
            cd /home/yoon/flik-server
            
            # .env 파일 생성 (환경 변수를 파일로 작성)
            echo "📝 Creating .env file..."
            cat > .env << EOF
            BUILD_TAG=${{ github.sha }}
            DOCKER_REGISTRY=${{ env.REGISTRY }}
            DOCKER_REPO=${{ env.IMAGE_NAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
            NAVER_SECRET=${{ secrets.NAVER_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ADMIN_MASTER_KEY=${{ secrets.ADMIN_MASTER_KEY }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            EOF
            
            # Docker 레지스트리 로그인
            echo "🔐 Logging into Docker registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # 이미지 pull 및 태그
            export IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
            echo "📦 Pulling new image..."
            docker pull ${{ env.REGISTRY }}/$IMAGE_LOWER:${{ github.sha }}-arm64
            docker tag ${{ env.REGISTRY }}/$IMAGE_LOWER:${{ github.sha }}-arm64 flik-springboot:latest
            
            # 기본 인프라 서비스들이 실행 중인지 확인하고 없으면 시작
            echo "🔍 Checking infrastructure services..."
            if ! docker ps | grep -q mysql; then
              echo "🚀 Starting MySQL..."
              docker compose --env-file .env up -d mysql
              sleep 10
            fi
            if ! docker ps | grep -q redis; then
              echo "🚀 Starting Redis..."
              docker compose --env-file .env up -d redis
            fi
            if ! docker ps | grep -q nginx; then
              echo "🚀 Starting Nginx..."
              docker compose --env-file .env up -d nginx
            fi
            
            # Blue/Green deployment logic
            CURRENT_CONTAINER=$(docker ps --filter "name=flik-" --format "{{.Names}}" | head -1)
            if [ "$CURRENT_CONTAINER" = "flik-blue" ]; then
              NEW_ENV="green"
              OLD_ENV="blue"
            else
              NEW_ENV="blue"
              OLD_ENV="green"
            fi
            
            echo "🔄 Deploying to $NEW_ENV environment (switching from $OLD_ENV)..."
            
            # 환경 정보를 파일에 저장 (검증 단계에서 사용)
            echo "NEW_ENV=$NEW_ENV" > /tmp/deploy_env
            echo "OLD_ENV=$OLD_ENV" >> /tmp/deploy_env
            
            # 새로운 환경 시작 (환경 변수 파일 사용)
            docker compose --env-file .env --profile $NEW_ENV up -d flik-$NEW_ENV
            
            # 헬스체크 최적화
            echo "⏳ Waiting for flik-$NEW_ENV to be healthy..."
            HEALTH_CHECK_COUNT=0
            MAX_HEALTH_CHECKS=20
            
            while [ $HEALTH_CHECK_COUNT -lt $MAX_HEALTH_CHECKS ]; do
              if docker exec flik-$NEW_ENV curl -f http://localhost:8080/api/actuator/health > /dev/null 2>&1; then
                echo "✅ flik-$NEW_ENV is healthy after $((HEALTH_CHECK_COUNT * 10)) seconds"
                break
              fi
              HEALTH_CHECK_COUNT=$((HEALTH_CHECK_COUNT + 1))
              if [ $HEALTH_CHECK_COUNT -eq $MAX_HEALTH_CHECKS ]; then
                echo "❌ flik-$NEW_ENV failed to start after $((MAX_HEALTH_CHECKS * 10)) seconds"
                docker logs flik-$NEW_ENV --tail 20
                exit 1
              fi
              echo "⏳ Health check $HEALTH_CHECK_COUNT/$MAX_HEALTH_CHECKS..."
              sleep 10
            done
            
            # Nginx 설정 업데이트
            echo "🔧 Updating nginx configuration..."
            cd /home/yoon/goormthon-java
            
            # 백업 및 설정 변경을 한번에 처리
            cp nginx/nginx.conf nginx/nginx.conf.backup
            sed -i "s/server flik-$OLD_ENV:8080/# server flik-$OLD_ENV:8080/" nginx/nginx.conf
            sed -i "s/# server flik-$NEW_ENV:8080/server flik-$NEW_ENV:8080/" nginx/nginx.conf
            
            # Nginx 설정 테스트 및 리로드
            if docker exec nginx nginx -t; then
              docker exec nginx nginx -s reload
              echo "✅ Nginx configuration updated successfully"
            else
              echo "❌ Nginx configuration test failed, rolling back..."
              cp nginx/nginx.conf.backup nginx/nginx.conf
              docker exec nginx nginx -s reload
              cd /home/yoon/flik-server
              docker compose --env-file .env stop flik-$NEW_ENV
              exit 1
            fi
            
            # 배포 테스트
            echo "🧪 Testing deployment..."
            sleep 3
            
            # 엔드포인트 테스트
            TEST_RESULTS=""
            curl -H "Host: flikapp.org" -sf http://localhost:19909/health > /dev/null 2>&1 && TEST_RESULTS="${TEST_RESULTS}health:ok " || TEST_RESULTS="${TEST_RESULTS}health:fail "
            curl -H "Host: flikapp.org" -sf http://localhost:19909/api/actuator/health > /dev/null 2>&1 && TEST_RESULTS="${TEST_RESULTS}actuator:ok " || TEST_RESULTS="${TEST_RESULTS}actuator:fail "
            
            if echo "$TEST_RESULTS" | grep -q "fail"; then
              echo "❌ Deployment failed, test results: $TEST_RESULTS"
              echo "🔄 Rolling back to $OLD_ENV..."
              cd /home/yoon/goormthon-java  
              cp nginx/nginx.conf.backup nginx/nginx.conf
              docker exec nginx nginx -s reload
              cd /home/yoon/flik-server
              docker compose --env-file .env stop flik-$NEW_ENV
              # 이전 환경이 중지되어 있다면 다시 시작
              if [ "$OLD_ENV" != "" ] && [ "$(docker ps -q -f name=flik-$OLD_ENV)" = "" ]; then
                echo "🔄 Restarting previous environment: flik-$OLD_ENV"
                docker compose --env-file .env --profile $OLD_ENV up -d flik-$OLD_ENV
              fi
              exit 1
            else
              echo "✅ Deployment successful, test results: $TEST_RESULTS"
              echo "🛑 Stopping old environment ($OLD_ENV)..."
              cd /home/yoon/flik-server
              docker compose --env-file .env stop flik-$OLD_ENV
            
              # 배포 완료 시간 계산
              DEPLOY_END=$(date +%s)
              DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
              echo "🎉 Blue/Green deployment completed! Active: $NEW_ENV"
              echo "⏱️  Total deployment time: ${DEPLOY_DURATION} seconds ($((DEPLOY_DURATION/60)) minutes)"
            
              # 리소스 정리
              echo "🧹 Cleaning up unused images..."
              docker image prune -f > /dev/null 2>&1 || true
            fi

      - name: 🧪 Verify Flik deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.RASPBERRY_PI_HOST }}
          username: ${{ env.RASPBERRY_PI_USER }}
          key: ${{ secrets.RASPBERRY_PI_SSH_KEY }}
          port: 2022
          timeout: 60s
          script: |
            echo "🔍 Final verification of Flik endpoints..."
            
            # 더 빠른 검증
            sleep 5
            
            # 상세한 엔드포인트 테스트
            echo "Testing health endpoint..."
            if curl -H "Host: flikapp.org" -sf http://localhost:19909/health; then
              echo "✅ Health check passed"
            else
              echo "❌ Health check failed"
            fi
            
            echo "Testing actuator endpoint..."
            if curl -H "Host: flikapp.org" -sf http://localhost:19909/api/actuator/health; then
              echo "✅ Actuator check passed"
            else
              echo "❌ Actuator check failed"
            fi
            
            # 컨테이너 상태 확인
            echo "📊 Container Status:"
            docker ps --filter "name=flik-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
            
            # 리소스 사용량 확인
            echo "💻 System Resources:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(docker ps --filter "name=flik-" -q) || true

      - name: 📢 Discord Success Notification
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎉 **Flik Server 배포 성공!**
            📦 **프로젝트**: ${{ github.repository }}
            🌿 **브랜치**: ${{ github.ref_name }}
            📝 **커밋**: `${{ github.sha }}`
            👤 **작성자**: ${{ github.actor }}
            💬 **메시지**: ${{ github.event.head_commit.message }}
            🔗 **URL**: https://flikapp.org

      - name: 📢 Discord Failure Notification
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ❌ **Flik Server 배포 실패!**
            📦 **프로젝트**: ${{ github.repository }}
            🌿 **브랜치**: ${{ github.ref_name }}
            📝 **커밋**: `${{ github.sha }}`
            👤 **작성자**: ${{ github.actor }}
            💬 **메시지**: ${{ github.event.head_commit.message }}
            🔄 **자동 롤백이 실행되었습니다**
            📊 **로그**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}