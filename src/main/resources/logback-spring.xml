<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 프로파일별 설정을 위한 변수 정의 -->
    <springProfile name="!prod">
        <property name="LOG_LEVEL" value="DEBUG"/>
        <property name="ROOT_LOG_LEVEL" value="INFO"/>
        <property name="MAX_FILE_SIZE" value="10MB"/>
        <property name="MAX_HISTORY" value="30"/>
    </springProfile>
    <springProfile name="prod">
        <property name="LOG_LEVEL" value="INFO"/>
        <property name="ROOT_LOG_LEVEL" value="WARN"/>
        <property name="MAX_FILE_SIZE" value="50MB"/>
        <property name="MAX_HISTORY" value="30"/>
    </springProfile>

    <!-- 로그 파일 경로 설정 (application.yml에서 지정한 경로 사용) -->
    <property name="LOG_PATH" value="${LOG_FILE_PATH:-./logs}"/>
    <property name="LOG_FILE_NAME" value="flik-app"/>

    <!-- 콘솔 출력 설정 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 일반 애플리케이션 로그 파일 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- OpenAI API 전용 로그 파일 -->
    <appender name="OPENAI_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/openai-api.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/openai-api.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 에러 전용 로그 파일 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n%ex
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>90</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 비동기 로그 처리를 위한 AsyncAppender -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <queueSize>512</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
    </appender>

    <appender name="ASYNC_OPENAI_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="OPENAI_FILE"/>
        <queueSize>256</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>false</includeCallerData>
    </appender>

    <!-- 배치 작업 관련 로거 -->
    <logger name="yunrry.flik.batch.job.GooglePlacesEnrichmentJob" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>

    <!-- 커스텀 로거들 -->
    <logger name="NULL_RATING_LOGGER" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
    </logger>

    <logger name="NO_PLACE_FOUND_LOGGER" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
    </logger>

    <!-- OpenAI Embedding Service 전용 로거 -->
    <logger name="yunrry.flik.core.service.embedding.OpenAIEmbeddingService" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_OPENAI_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>

    <!-- 임베딩 관련 모든 서비스 로그 -->
    <logger name="yunrry.flik.core.service.embedding" level="${LOG_LEVEL}" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_OPENAI_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>

    <!-- WebClient HTTP 요청/응답 로그 (디버깅용) -->
    <springProfile name="!prod">
        <logger name="org.springframework.web.reactive.function.client" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_OPENAI_FILE"/>
        </logger>

        <!-- Reactor 네티 HTTP 클라이언트 로그 -->
        <logger name="reactor.netty.http.client" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="ASYNC_OPENAI_FILE"/>
        </logger>
    </springProfile>

    <!-- Spring Boot 관련 로그 레벨 조정 -->
    <logger name="org.springframework.boot" level="INFO"/>
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springframework.data" level="INFO"/>

    <!-- Hibernate/JPA 로그 -->
    <logger name="org.hibernate.SQL" level="DEBUG"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>

    <!-- 애플리케이션 패키지 로그 -->
    <logger name="yunrry.flik" level="${LOG_LEVEL}" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>

    <!-- Root 로거 -->
    <root level="${ROOT_LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <!-- 프로덕션 환경에서 민감한 정보 필터링 -->
    <springProfile name="prod">
        <!-- API 키 등 민감한 정보가 포함된 로그 필터링 -->
        <turboFilter class="ch.qos.logback.classic.turbo.DuplicateMessageFilter">
            <allowedRepetitions>5</allowedRepetitions>
        </turboFilter>
    </springProfile>

    <!-- 개발 환경에서만 상세 로그 -->
    <springProfile name="dev,local">
        <!-- 모든 SQL 쿼리와 파라미터 로그 -->
        <logger name="org.hibernate.SQL" level="DEBUG"/>
        <logger name="org.hibernate.type" level="TRACE"/>

        <!-- 트랜잭션 로그 -->
        <logger name="org.springframework.transaction" level="DEBUG"/>
    </springProfile>

</configuration>